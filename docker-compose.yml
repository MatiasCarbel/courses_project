version: "3.8"
services:
  # Users API Service
  users-api:
    build: ./users-api # Path to your Dockerfile for users-api
    ports:
      - "8001:8001" # Expose users-api on port 8001
    environment:
      - DB_HOST=mysql # MySQL service name
      - DB_PORT=3306
      - DB_USER=root # MySQL root user
      - DB_PASSWORD=yourpassword # MySQL root password
      - DB_NAME=usersdb # Name of the MySQL database
    depends_on:
      - mysql # Ensure MySQL starts before users-api

  # MySQL Service
  mysql:
    image: mysql:latest # MySQL Docker image
    environment:
      MYSQL_ROOT_PASSWORD: yourpassword # MySQL root password
      MYSQL_DATABASE: usersdb # Name of the database
    ports:
      - "3306:3306" # Expose MySQL on port 3306
    volumes:
      - mysql-data:/var/lib/mysql # Persist MySQL data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # Mount init.sql for table creation (read-only)

  # Memcached Service
  memcached:
    image: memcached:latest
    ports:
      - "11211:11211"

  # Courses API Service
  courses-api:
    build: ./courses-api # Path to your Dockerfile for courses-api
    ports:
      - "8002:8002" # Expose courses-api on port 8002
    environment:
      - MONGO_URI=mongodb://mongo:27017/coursesdb # MongoDB connection URI
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app-network

  # MongoDB Service
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Solr Service
  solr:
    image: solr:latest
    ports:
      - "8983:8983"
    volumes:
      - ./solr/config:/opt/solr/server/solr/configsets/courses/conf
    command:
      - solr-precreate
      - courses
      - /opt/solr/server/solr/configsets/courses
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8983/solr/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management plugin
    networks:
      - app-network

  # Search API Service
  search-api:
    build: ./search-api
    ports:
      - "8003:8003"
    depends_on:
      solr:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - SOLR_URL=http://solr:8983
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672/
    networks:
      - app-network

  # Frontend Service
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SEARCH_API_URL=http://search-api:8003
      - NEXT_PUBLIC_COURSES_API_URL=http://courses-api:8002
      - NEXT_PUBLIC_USERS_API_URL=http://users-api:8001
      - NEXT_PUBLIC_BASE_API_URL=http://search-api:8003
    networks:
      - app-network
    depends_on:
      - search-api
      - courses-api
      - users-api

volumes:
  mysql-data:
  mongo-data:
  solr-data:

networks:
  app-network:
    driver: bridge
